from dataclasses import dataclass
 
 

dictionairy = {
    "the": [
            [0],
            [0]
            ]
        ,
    "cat": [
        [1],
        [1]
        ],
    "sat": [
        [1],
        [1]
        ],
    "on": [
        [0],
        [2]
        ],
    "mat": [
        [1],
        [1]
        ],
    "slowly": [
        [1,0],
        [3]
        ],
    "scrawnily": [
        [1,0,1],
        [3]
        ],
    "dog": [
        [1],
        [4]
        ]
}

def checkLinesRhyme(rhyme_scheme_1, rhyme_scheme_2):
    return rhyme_scheme_1[-1] == rhyme_scheme_2[-1]
    
def checkSameRhythm(rhythm_scheme_1,rhythm_scheme_2):
    return rhythm_scheme_1 == rhythm_scheme_2
    
def checkMeetsTimbre(rhythm_scheme: [], timbre: [])-> bool:

    timbre_length = len(timbre)
    split_rhythm_scheme = list_split(rhythm_scheme, timbre_length)
    
    for split in split_rhythm_scheme:
        if split != timbre: return False
    return True
    
def list_split(listA, n):
        for x in range(0, len(listA), n):
            every_chunk = listA[x: n+x]
    
            if len(every_chunk) < n:
                every_chunk = every_chunk + \
                    [None for y in range(n-len(every_chunk))]
            yield every_chunk   

string_1 = "The cat sat on the mat slowly"
string_2 = "The cat sat on the mat scrawnily"
string_3 = "The cat on mat"


def produce_rhyme_rhythm_scheme(string):
    words = string.lower().split(" ")

    rhythm = []
    rhyme  = []
    
    for word in words:
        rhythm += dictionairy[word.lower()][0]
        rhyme  += dictionairy[word.lower()][1]
    
    return [words,rhyme,rhythm]
    
string_scheme_1 =  produce_rhyme_rhythm_scheme(string_1)  
string_scheme_2 =  produce_rhyme_rhythm_scheme(string_2)  

print("Line 1: ", string_1)
print("Line 2: ", string_2)

print("Line 1 and line 2 rhyme: ", checkLinesRhyme(string_scheme_1[1],string_scheme_2[1]))
print("Line 1 and line 2 have same rhythm: ", checkSameRhythm(string_scheme_1[2], string_scheme_2[2]))
print("Line 1 is Iambic Pentameter: ", checkMeetsTimbre(string_scheme_1[2], [0,1] ))




print("---------------------")
string_1 = "The cat sat on the mat"
string_2 = "The cat sat on the dog"

string_scheme_1 =  produce_rhyme_rhythm_scheme(string_1)  
string_scheme_2 =  produce_rhyme_rhythm_scheme(string_2)  

print("Line 1: ", string_1)
print("Line 2: ", string_2)

print("Line 1 and line 2 rhyme: ", checkLinesRhyme(string_scheme_1[1],string_scheme_2[1]))
print("Line 1 and line 2 have same rhythm: ", checkSameRhythm(string_scheme_1[2], string_scheme_2[2]))
print("Line 1 is Iambic: ", checkMeetsTimbre(string_scheme_1[2], [0,1] ))

print("---------------------")
string_1 = "The cat on mat"


string_scheme_1 =  produce_rhyme_rhythm_scheme(string_1)  

print("Line 1: ", string_1)


print("Line 1 is Iambic Pentameter: ", checkMeetsTimbre(string_scheme_1[2], [0,1] ))

 word = {
     chars: str,
     sounds: [ str ],
     rhyme: [ str ],
     rhythm: [ bool ]
 }

# REPLACE WITH ENUM AS ONLY SO MANY THINGS
@dataclass
rule = {
    name: str,
    type: str,
    check: lambda
}






def write_sentence(rules: []):
    
    done = False
    
    def generate
    
    def check_against_rules( rules: [str], sentence: [[]]):
        
        for check_rule in rules:
            result_text = rule.check(sentence)
            print(result_text)
            
        
            
            
            
            
        
        
    
    def check_timbre_fit
    ( 
         timbre: [ ]
        ,sentence_words: [ [ [  ]]]
        ,test_rhythm: [ [  ]]
    ):
        relevent_beats = sentence_words[ [2] [ - len( timbre) ) ]
        
        if  not checkMeetsTimbre( 
            relevent_beats + test_rhythm
            , timbre
            ):
                # for rule in rules:
                    # check rules
                check_against_rules( rules, sentence ) # !!! Can make this recursive probably
                
                
                
                print("Here are some suggested words: \n\n")
                print( sentence.suggest_words() )
                print("Type /y to use this word, or anything else to write that word")
                
                
                
        
        
        
        
    
    sentence = [
        [], # words
        [], # rhyme
        []  # rhythm
        ]
    
    while( not done ):
        syllabul_number = len(flatten(words))
        
        test_word = dictionairy[input()]
        
        
        
        
        
        sentence.append()
        
        if word[-1] == ".": break
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
