from dataclasses import dataclass
import math

def flatten(xss):
    return [x for xs in xss for x in xs]

dictionairy = {
    "the": {
        "rhythm": [0],
        "rhyme": 0
        },
        
    "cat": {
        "rhythm": [1],
        "rhyme": 1
        },
    "sat": {
        "rhythm": [1],
        "rhyme": 1
        },
    "on": {
        "rhythm": [0],
        "rhyme": 2
        },
    "mat": {
        "rhythm": [1],
        "rhyme": 1
        },
    "slowly": {
        "rhythm": [1,0],
        "rhyme": 3
        },
    "scrawnily": {
        "rhythm": [1,0,1],
        "rhyme": 3
        },
    "dog": {
        "rhythm": [1],
        "rhyme": 4
        },
}

def checkLinesRhyme(rhyme_scheme_1, rhyme_scheme_2):
    return rhyme_scheme_1[-1] == rhyme_scheme_2[-1]
    
def checkSameRhythm(rhythm_scheme_1,rhythm_scheme_2):
    return rhythm_scheme_1 == rhythm_scheme_2
    
def checkMeetsTimbre(rhythm_scheme: [], timbre: [])-> bool:

    timbre_length = len(timbre)
    split_rhythm_scheme = list_split(rhythm_scheme, timbre_length)
    
    
    
    for split in split_rhythm_scheme:
        if split != timbre: return False
    return True
    
def list_split(listA, n):
        for x in range(0, len(listA), n):
            every_chunk = listA[x: n+x]
    
            if len(every_chunk) < n:
                every_chunk = every_chunk + \
                    [None for y in range(n-len(every_chunk))]
            yield every_chunk   

string_1 = "The cat sat on the mat slowly"
string_2 = "The cat sat on the mat scrawnily"
string_3 = "The cat on mat"


def produce_rhyme_rhythm_scheme(sentence):
    words = [word.lower() for word in sentence]

    rhythm = []
    rhyme  = []
    
    for word in words:
        rhythm.append(dictionairy[word]["rhythm"])
        rhyme.append(dictionairy[word]["rhyme"])
    
    return [words,rhyme,flatten(rhythm)]

"""    
string_scheme_1 =  produce_rhyme_rhythm_scheme(string_1)  
string_scheme_2 =  produce_rhyme_rhythm_scheme(string_2)  

print("Line 1: ", string_1)
print("Line 2: ", string_2)

print("Line 1 and line 2 rhyme: ", checkLinesRhyme(string_scheme_1[1],string_scheme_2[1]))
print("Line 1 and line 2 have same rhythm: ", checkSameRhythm(string_scheme_1[2], string_scheme_2[2]))
print("Line 1 is Iambic Pentameter: ", checkMeetsTimbre(string_scheme_1[2], [0,1] ))




print("---------------------")
string_1 = "The cat sat on the mat"
string_2 = "The cat sat on the dog"

string_scheme_1 =  produce_rhyme_rhythm_scheme(string_1)  
string_scheme_2 =  produce_rhyme_rhythm_scheme(string_2)  

print("Line 1: ", string_1)
print("Line 2: ", string_2)

print("Line 1 and line 2 rhyme: ", checkLinesRhyme(string_scheme_1[1],string_scheme_2[1]))
print("Line 1 and line 2 have same rhythm: ", checkSameRhythm(string_scheme_1[2], string_scheme_2[2]))
print("Line 1 is Iambic: ", checkMeetsTimbre(string_scheme_1[2], [0,1] ))

print("---------------------")
string_1 = "The cat on mat"


string_scheme_1 =  produce_rhyme_rhythm_scheme(string_1)  

print("Line 1: ", string_1)


#print("Line 1 is Iambic Pentameter: ", checkMeetsTimbre(string_scheme_1[2], [0,1] ))
"""
"""
word = {
    chars: str,
    sounds: [ str ],
    rhyme: [ str ],
    rhythm: [ bool ]
}
 

sentence = {
 words: word
}


paragraph = {
 sentences: sentence
}



# REPLACE WITH ENUM AS ONLY SO MANY THINGS

rule = {
    name: str,
    type: str,
    # check: lambda
}
""" 


def check_line_length(sentence, test_word):
    max_length = 10
    print(sentence)
    sentence_rhythm = produce_rhyme_rhythm_scheme(sentence)[2]
    print(sentence_rhythm)
    if len(sentence_rhythm) > max_length:
        print("Breaks rule: line length")
        return
        
    
    if len(sentence_rhythm) == max_length:
        print("At max Length")
        return
        
    
    
def check_timbre_fit( 
        sentence
        , test_word
    ):
        #print("Checking Timbre Fit")
        
        timbre = [0,1]
        
        sentence_rhythm = produce_rhyme_rhythm_scheme(sentence)[2]
        #print(sentence_rhythm)
        relevent_beats = sentence_rhythm[ - len( timbre) : ]
        test_beats = relevent_beats + dictionairy[test_word]["rhythm"]
        #print("Test beats:", test_beats)
        
        phrase_count = math.ceil(len(test_beats) / len(timbre) )
        
        correct_rhythm = []  
        for i in range(0, phrase_count):
            correct_rhythm+= timbre
        
        #print("Correct Rhythm:", correct_rhythm)

        if test_beats != correct_rhythm[: len(test_beats)]:
            print("Breaks rule: timbre")
        
        

    
def warn_against_rules( rules: [], sentence, test_word, test_word_props):
    for rule_check in rules:
        rule_check(sentence,test_word)
        
              

def write_sentence(rules: []):
    
    done = False
    sentence = []
    # sentence = ["The","cat","sat","on","the","mat"]

    while( not done ):
        print("Enter word")
        test_word = input()
        test_word_props = dictionairy[test_word]
        
        warn_against_rules(rules, sentence, test_word, test_word_props)
        
        
        print("Here are some suggested words: \n\n")
        #print( sentence.suggest_words() )
        print("Type /y to use this word, or anything else to write that word")
        
        response = input()
        if response == "/y":
            sentence.append(test_word)
        else:
            continue
            

        
        if test_word[-1] == ".": break
    
    
    
    
write_sentence([check_line_length, check_timbre_fit])
    
    
    
    
