dictionairy = {
    "the": [
            [0],
            [0]
            ]
        ,
    "cat": [
        [1],
        [1]
        ],
    "sat": [
        [1],
        [1]
        ],
    "on": [
        [0],
        [2]
        ],
    "mat": [
        [1],
        [1]
        ],
    "slowly": [
        [1,0],
        [3]
        ],
    "scrawnily": [
        [1,0,1],
        [3]
        ],
}

def checkLinesRhyme(rhyme_scheme_1, rhyme_scheme_2):
    return rhyme_scheme_1[-1] == rhyme_scheme_2[-1]
    
def checkSameRhythm(rhythm_scheme_1,rhythm_scheme_2):
    return rhythm_scheme_1 == rhythm_scheme_2
    
def checkMeetsTimbre(rhythm_scheme: [], timbre: [])-> bool:
    
    
    
    timbre_length = len(timbre)
    split_rhythm_scheme = list_split(rhythm_scheme, timbre_length)
    
    for split in split_rhythm_scheme:
        if split != timbre: return False
    return True
    
def list_split(listA, n):
        for x in range(0, len(listA), n):
            every_chunk = listA[x: n+x]
    
            if len(every_chunk) < n:
                every_chunk = every_chunk + \
                    [None for y in range(n-len(every_chunk))]
            yield every_chunk   

string_1 = "The cat sat on the mat slowly"
string_2 = "The cat sat on the mat scrawnily"
string_3 = "The cat on mat"


def produce_rhyme_rhythm_scheme(string):
    words = string.lower().split(" ")

    rhythm = []
    rhyme  = []
    
    for word in words:
        rhythm += dictionairy[word.lower()][0]
        rhyme  += dictionairy[word.lower()][1]
    
    return [words,rhyme,rhythm]
 

def write_sentence(timbre):
    done = False
    
    sentence = [
        [], # words
        [], # rhyme
        []  # rhythm
        ]
    
    while( not done ):
        syllabul_number = len(flatten(words))
        
        word = input()
        
        sentence.append()
        
        if word[-1] == ".": break
        
